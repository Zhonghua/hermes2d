 - dependecies
	- create a directory structure in your ROOT directory 
		- TODO: vytvorit make_dirs.bat nebo doplnit cmake s parametrem ROOT, doplni systemovou cestu o bin podadresar
		- all source code of requires library should go to the src sub-directory
	- JUDY
		- download a MSVC compatible modification of inttypes.h
		- download judy from http://sourceforge.net/projects/judy/
		- run command promt with set up MSVC environment
		- compile JUDY with ./src/build.bat, it creates Judy.dll and Judy.lib
		- copy Judy.dll, Judy.h, and Judy.lib to 'bin', 'include', and 'lib' directories respectivelly in the created directory structure
	- FREEGLUT
		- download freeglut 2.4.0 (
		- compile freeglut using prepared DSW and DSP file (MSVC newer than 6.0 will convert them to appropriate format automatically)
		- copy freeglut.dll, freeglut.h, and freeglut.lib to 'bin', 'include', and 'lib' directories respectivelly in the created directory structure
	- PTHREAD
		- download pthread binaries, pthreadVCE2 version
		- copy pthread header file, library and binary to the directory structure
	- UFconfig
		- download UFconfig source files (http://www.cise.ufl.edu/research/sparse/UFconfig/)
		- extract them
		- copy UFconfig.h to 'include' directories respectivelly in the created directory structure

	- AMD
		- download AMD source codes (http://www.cise.ufl.edu/research/sparse/amd/)
		- extract source file into a directory at the same directory level as UFconfig
		- in the Lib directory
			- replace 'libamd.def' with supplied file (file://libamd.def)
			- copy supplied 'Makefile.nmake'
		- in the MSVC command prompt run 'nmake -f Makefile.nmake' to compile AMD
		- copy libamd.dll, amd.h/amd_internal.h, and libamd.lib to 'bin', 'include', and 'lib' directories respectivelly in the created directory structure
	- UMFPACK
		- download UMFPACK source code (http://www.cise.ufl.edu/research/sparse/umfpack/current/)
		- extract source file into a directory at the same directory level as UFconfig
		- copy supplied 'Makefile.nmake' to the Lib directory
		- in the MSVC command prompt run 'nmake -f Makefile.name' to compile UMFPACK. Linking takes some time, so be patient.
		- copy 'libumfpack.dll', include files, and 'libumfpack.lib' to 'bin', 'include', and 'lib' directories respectivelly in the created directory structure
	- CMAKE
		- download (http://www.cmake.org/cmake/resources/software.html) and install CMAKE, version 2.6.X at minimum
		
 - Hermes2D MSVC compiling
	- add header files required by Judy
	- add /D "_CRT_SECURE_NO_WARNINGS" to avoid warnings about standard C functions that are considered unsecure
	- add /D "__value=_value" to the command line of the C/C++ compiler (avoids a possible bug in the compiler)
	- add /D "_USE_MATH_DEFINES" to include definition of M_PI
	- add /D "finite=_finite" to define the function finite
	- add /D "popen=_popen" to define the function popen
	- add /D "pclose=_pclose" to define the function pclose
	- add /D_HERMESDLL to declare that Hermes DLL is going to be build
	- add /DYY_NO_UNISTD_H to avoid use of unistd.h in lexer because it is not available in MSVC
	- remove all linked libraries except Judy.lib and pthread.lib, check 'Inherit from parent or project defaults'
	- replace a linked library "pthread.lib" with "pthreadVCE2.lib"
	- change 'C/C++\Code Generation\Runtime Library' to 'Multi-threaded Debug DLL' for DEBUG version
	- change 'General\Output Directory' to '$(SolutionDir)$(ConfigurationName)' for proper compilation of files
	- change 'General\Intermediate Directory' to '$(ConfigurationName)' for proper compilation of files
	- change 'Linker\General\Output File' to '$(ProjectName)$(TargetExt)' instead of an absolute path. This defines Target variables.
	- merge all intermediate directories to a single one (check how does a native code look like)
	- add header files to a the project (separate directory)
	- remove 'hermes2d.*' because it references 'discrete.*' that is deprecated
	- add '/DEBUG' amd '/PDB:$(TargetDir)$(TargetName).pdb' to enable generating of debug info in the DEBUG version. CMake should generate appropriate path.
	
 - Hermes2D examples
	- missing reference to Hermes2D library
		- Location: all examples
		- Symptoms: Examples refer to Hermes2D library but do not provide any path.
		- Fix: Include Hermes2D-real/cplx to the project and set project dependecies.
	- missing reference to Judy.lib and pthreadVCE2.lib when Hermes2D is compiled as a static library
		- Symptoms: Example will not compile.
		- Fix: Include directory and Judy.lib, pthreadVCE2.lib into the path or use DLL version of Hermes2D.
	- missing definitions
		- Location: hdiv, bessel, layer
		- Symptoms: Missing definitions of M_PI.
		- Fix: Add '/D "_USE_MATH_DEFINES"' to the compiler command line.
	- ambiguous math function calls
		- Location: screen
		- Symptoms: Calling a math function in C++ with an integer as the input parameter consfuses compiler due to multiple overloaded functions.
		- Fix: Specify a floating point type, i.e., use sqrt(2.0) instead of sqrt(2).
	- crash of the example 'crack'
		- Location: crack, DEBUG
		- Symptoms: The example crashes when executed without debugging but runs when debugging with MSVC. The problem occures in Space::free_extra_data, where some pointers are invalid (upper 4 bytes are zero). Such an invalid pointer, however, is not assigned anywhere.

	- 
		
 - Hermes2D MSVC cmake
	- different library names
		- Symptoms: Name of some libraries differs from 
	
 - Hermes2D source code modification
	- incorrect use of the function "add_built_in"
		- Symptoms: original functions requires type casting from a function to void *. The function, however, is overloaded in MSVC, .e.g., besides double cos(double), there is long double cos(long double), etc.
		- Fix: defined a function types MSymbolFunction1 and MSymbolFunction2 and defined a new and overloaded functions add_built_in to accept these two defined types
	- missing return values of functions
		- Symptoms: Some functions declare a return type but does not return any value even though they do not contain any 'error("...")' call, .e.g., solver.h, ln. 81.
		- Fix: Added a return value (0 or NULL).
	- missing C-function "finite"
		- Symptoms: The function "finite" is missing.
		- Fix: Added a reference to <float.h> to a file 'common.h' and added a macro (/D "finite=_finite") that maps the function 'finite' to the function '_finite' that has very similar output (except 1 it returns a non-zero value).
	- missing C-funcions "popen" and "pclose"
		- Symptoms: The functions "popen" and "pclose" are missing.
		- Fix: Added 
	- missing "std::max" and "std::min"
		- Symptoms: The functions "min" and "max" are defined as preprocessor directives.
		- Fix: Removed include of the file <minmax.h> from common.h.
	- missing support for VLA in MSVC
		- Symptoms: MSVC does not support C99 because it is C++ compiler and C99 is not a part of ISO C++ specification.
		- Fix: Added a macro 'AUTOLA_OR(__type, __name, __len)' + a class 'AutoLocalArray' and AUTOLA_CL(__class, __name, __len) + a class 'ErrorFn* err[num]'. Both macros declare an instance of the class. Both classes handle the array access and provide information about size. The macro 'AUTOLA_CL' allocates instances on the heap in order to invoke the default contructor in the case of classes the do not implement a proper copy mechanism.
	- missing definition of NAN
		- Symptoms: NAN is used in solution.cpp, ln. 1172 but it is defined in C99.
		- Fix: Added a definition of a NAN to common.h as a global constant variable rather than a preprocessor directive.
	- missing fmemopen
		- Symptoms: fmemopen is not defined in MSVC because it is a GNU extension. This is another issue of mixing C and C++ becuse in C++ supports memory streams.
		- Proposed fix: None, commented out. Use C++ streams instead.
	- frequent use of int[4] instead of defining a new type
		- Symptoms: Requested by the functions to avoid frequent modifications of code.
		- Fix: Used type int4 instead.
    - no exported symbol/classes
		- Symptoms: No classes are marked for exporting and thus it is not possible to use the library.
		- Fix: Added '/D_HERMESDLL' to distinguis between the library build and the use of Hermed2D. Added PUBLIC_API macro that will introduce __declspec(dllexport) and __declspec(dllimport) to exported classes.
	- some symbols are outside classes
		- Symptoms: Some symbols are exported just using 'extern' and therefore they cannot be referenced.
		- Fix: Added a macro 'EXTERN' that defineds proper dllimpot/dllexport based on the presence of the macro _HERMESDLL.
	- use of deprecated parts
		- Symptoms: Even though 'discrete.h' is marked as deprecated and 'discrete.cpp' is excluded from build, 'discrete.h' is included.
		- Fix: Removed 'discrete.h'.
	- classes without declaration
		- Symptoms: Some classes have bodies together with their definition, i.e., in the header file. (solver*.h). Since they are not used by Hermes2D, they are not included into the DLL.
		- Fix: Remove PUBLIC_API from definitions from classes Solver + his children.
	- inproper including of header files
		- Symptoms: Some header files are included in hermes2d-real even though bodies are implemented only for COMPLEX.
		- Fix: Modified 'adapt_ortho_hcurl.h' to be skipped if the macro COMPLEX is not defined.
	- redundant types
		- Symptoms: Hermes2D defines a type uint64 while <inttypes.h> defines a type uint64_t. At the same time, a naming convetion assumes that int4 is a vector of 4 elements, i.e., uint64 could be an array of 64 elements.
		- Fix: uint64 replaced with uint64_t.
		
	- Hermes2D source file changes and errros
		- added auto_local_array.h
			- Contents: It contains definition of the class AutoLocalArray and the macro AUTOLA
		- added c99_compatibility.h and c99_compatibility.cpp
			- Contents: It contains definition of functions and constants that are available in C99 but not in MSVC or any other C++ compiler.
		- invalid use of delete[]
			- Symptoms: Calling VectorBaseView::free ends up with ASSERT.
			- Fix: Replaces delete[] with delete. Both 'pss' and 'sln' are not arrays.
		- invalid assumption on realloc
			- Symptoms: H1Space::merge_baselists calls realloc to shrink the pre-allocated field if it is not filled completelly. However, it assumes that the returned pointer is the same as the proviede one even though this is implmentation dependant. At the same time the method returns pointer to the array.
			- Fix: When reallocating, shift the returned pointer or replace returned pointer with an index.
		- inconsistency in handling edge nodes
			- Symptoms: H1Space::output_components checks whether DOF of an edge node is the same as DOF of the last component. If so, it does not allocate the space for the edge node and it sets a pointer edge_dofs to the last component. However, H1Space::updagte_contrained_nodes, which is an indirect caller of H1Space::output_components, writes edge nodes at edge_dofs no matter if the space is allocated or not. So, if ndata[edge->id].n > 1, this overwrites some data or it may even write outside the allocated area.
		- inconsisent calling of error/norm evaluation in L2OrthoHP
			- Symptoms: L2OrthoHP::calc_error_n calls int_h1_error and int_h1_norm instead of int_l2_error and int_l2_norm.
		
	- Hermes2D source code notes
		- frequent occurence of functions that declare a return value but not all code paths return one
			- Type: Coding
			- Location: everywhere
			- Symptoms: It gives a warning when compiling
			- Proposed fix: Clear the code.
		- frequent occurence of unsigned/signed conflict when comparing
			- Type: Coding
			- Location: everywhere, expecially when function size() is called
			- Symptoms: It gives a warning when compiling.
			- Proposed fix: Clear the code.
		- frequence unhandled conversion from int64 to Word_t
			- Type: Coding
			- Location: everywhere, especially when calling Judy
			- Symptoms: It gives a warning when compiling. Using int64 to supply a value for a parameters of a type Word_t might be a source of overflow errors.
			- Proposed fix: Either replace int64 with an appropriate type or add an explicit type conversion operator.
		- frequent occurence of unused variables
			- Type: Readability
			- Location: everywhere
			- Symptoms: It gives a warning when compiling.
			- Proposed fix: Clear the code.
		- possible run-time issue
			- Type: Design
			- Location: solution.cpp, 892
			- Symptoms: sprintf of a path to a constant buffer (270 characters). Might cause SIGSEG or other mysterious crash.
			- Proposed fix: Use C++ streams.
		- use of external utilities without a check
			- Type: Design
			- Location: solution.cpp, 982
			- Symptoms: Uses an external tool instead of a library such as the libz or other one. A simple solution but might cause emotional issues especially when the library does not check for it when the computation starts and simply quits when gzip is not found instead of saving results in uncompressed form.
		- ambiguous project files and missing SLN files
			- Symptoms: src directory contains hermes2d.prj that compiles Hermes2D while the root contains hermes2d.sln that compiles examples only.
		- unused variable 'Space::extra_data'
			- Type: Readability
			- Symptoms: The variable is written but never read. In DEBUG version run outside MSVC it causes crash in an example 'crack' while being deallocated. It seems that one of items is overwritten by some non-sence, i.e., non-pointer value. Also, variable is a vector of (void*). Since both classes Space and H1Space write to this vector at different functions, the type 'void*' is not safe. Without addtional info, it is not possible to distinguish between stored types.
			- Proposed fix: Remove the variable or change its type.
		- inappropriate sampling function
			- Type: Design
			- Symptoms: The sampling function used by the method Solution::set_exact does not allow any customalization, i.e., a different settings of sampling or a second input image requires a completely different function. Also, despite that the function is used many type, it is not defined as a type.
			- Proposed fix: Add a last parameter as 'void* parameter' and defined a type describing the function.
		- inconsistent split of functionality
			- Type: Design
			- Symptoms: RefSystem::assemble creates a fine mesh and then it assembles the reference system. The assembling is invoked through parent's method and the mesh creation is invoked through a public method refine_mesh. This is dangerous becasue one of methods invokes other public method by default. Among others, this seems to change the meaning of the method assemble.
			- Proposed fix: Remove 'refine_mesh' call from 'assemble'.
		- reimplementing a non-virtual function
			- Type: Design
			- Symptoms: 'RefSystem' implemented a new version of 'assemble'. However, 'assemble' is not virtual. Hence, by type-casting the instance of RefSystem to its parent, calling of RefSystem::assemble is virtually disabled unless a (dangerous) type casting to a child occurs.
			- Proposed fix: Make LinSystem::assemble virtual or do not re-implement it in RefSystem.
		- frequent use of a function as a type without a formal definition
			- Type: C-crap
			- Location: refsystem.h
			- Symptoms: Multiple functions uses a type that is a pointer to a function. However, the type is defined on every use instead of defining a type. Such an approach can be considered as a possible risk to the source code consistency.
			- Proposed fix: Defined a type.
		- lack of documentation
			- Type: Readability
			- Symptoms: A majority of functions is not documented or documentation is completely useless, i.e., 'Internal. Used by... Should not be called directly.'.
		- fields instead of structures
			- Type: Readability
			- Location: h1_ortho_hp.cpp: method H1OrthoHP::calc_projection_errors_exact, ...
			- Symptoms: Usually, the code uses a int[4] (or any other array) similar to a structure containing 4 integers. This style significantly reduces readibility of the code and increases a risk by a type.
		- use of const int instead of symbolic constants
			- Type: Readability
			- Location: function.h
			- Symptoms: The code uses const int variables instead of symbolic constants. This limites abilities of intelisence in MSVS because MSVC evaluates the value before showing it, i.e., instead of FN_VAL | FN_DX | FN_DY is shown 455. Furthermore, this would have a meaning if and only if all constants would be done the same way. However, FN_VAL, etc. are defined as enums, i.e., they are not changed when DLL is replaced. This creates incosistency.
		- standalone functions
			- Type: C-crap
			- Location: function.h
			- Symptoms: Some functions are standalone because they are defined as inline. This reduces code readability because it is rather a guess where these functions belongs.
		- internal functions publicaly available
			- Type: Design
			- Location: class OrderView
			- Symptoms: A function is marked as with a suffix 'internal' but it is a public part of API.
		- inappropriatelly named files
			- Type: Readability
			- Location: view.h, view?.cpp
			- Symptoms: A header 'view.h' defines multiple classes that are implemented in 'view?.cpp'. Neither H-file nor CPP-files are not named after classes.
			- Proposed fix: Name files properly, do not mix implementation of various types together.
			
	- JUDY MSVC compiling
		- provided 'built.bat' works perfectly
			
	- AMD MSVC compiling
		- general compiling
			- Symptoms: Provided Makefile is not compatible with CL.
			- Fix: All Instead of 'ar' 'cl /link' (or 'cl -link') has to be called. The option '-o file.o' has to be replaced with '-Fofile.obj'
		- invalid libamd.def file
			- Symptoms: libamd.def file does not export all symbols used by UMPFPACK.
			- Fix: Added required symbols.
		- invalid exporting of variables
			- Symptoms: Exported variables are exported (probably) as pointers to variables.
			- Fix: Modified 'libamd.def' and 'amd.h'.

	- UMFPACK MSVC compiling
		- general compiling
			- Symptoms: Provided Makefile is not compatible with CL
			- Fix: All '-' has to be replaced with '/'. Instead of 'ar' 'cl /link' has to be called. The option '-o file.o' has to be replaced with '-Fofile.obj'.
		- invalid exporting of variables
			- Symptoms: Exported variables are exported (probably) as pointers to variables.
			- Fix: Modified 'libumfpack.def' and 'umfpack_global.h'.
	
	- FreeGLUT compiling
		- provided DSW and DSP works perfectly
	
	- himg source code nodes
		- inappropriate including source code
			- Location: main.cpp
			- Symptoms: 'cmd_line_parsing.cpp' and 'pix_by_pix_integrals.cpp' are included into main.cpp instead of the usual way.
			- Proposed fix: Create appropriate header files.
		- main function too long
			- Location: main.cpp
			- Symptoms: 'main' function is too long.
			- Proposed fix: Initilization and cleanup parts should be moved out of main.
		- no naming convetion applied
			- Symptoms: No standard naming convention applied.
			- Proposed fix: Learn how to name properly.
		- numbers instead of named constants
			- Symptoms: Instead of named constans or enums, the code uses magic numbers.
			- Proposed fix: Learn how to code safely.
		- no logical ordering
			- Symptoms: Fragments of code and definition are scattered randomly in the file.
			- Proposed fix: Learn how to code.
		- adjusting values of variables in verbosing outputs
			- Location: main.cpp
			- Symptoms: Verbosing output influences variable. Since the output can be omitted, this technique is prone to a serious error.
			- Proposed fix: Please, do not code at all.
		- no documentation of parameters
			- Symptoms: If no parameters are given, no help on command line parameters is shown.
			- Proposed fix: Punish the developer.
		- readRow is invalid
			- Location: bitmap.cpp
			- Symptoms: Function 'readRow' returns false all the time.
		- bitmap reading is corrupted
			- Location: bitmap.cpp
			- Symptoms: The code fails to read lenna512.pgm. On an error, the code leaves the functions without closing the input file.
			
		- unassigned mesh
			- Location: weakform.cpp:204
			- Symptoms: It seems this is an issue of a mesh function in the exact_sln. Weakform::lvfrm is used before exact_sln is assigned but exact_sln initialization requires RefSystem to be initialized that requires LinSystem instance that call LinSystem::assemble that requires initialized exact_sln.
			
Welcome to Hermes2D!

This is a README file for Windows.

Download and install the free Dev-C++ IDE from http://www.bloodshed.net/dev/
It only has 9 MB and contains a user-friendly IDE and the complete GCC compiler
for Windows called MinGW. When prompted for the installation directory, use C:\Dev-Cpp

To ensure that important files such as the GCC compiler and the libraries can
always be found, right-click My Computer and go to Properties / Advanced / Environment Variables.
Press the New button and enter a variable called "Path" containing the text

C:\Dev-Cpp\bin;C:\Dev-Cpp\include;C:\Dev-Cpp\lib

Since the compilation of libraries that Hermes2D depends on is extremely painful
on Windows, we have prepared a pre-compiled package containing the libraries
FreeGLUT, Judy, pthread, BLAS and UMFPACK. All you have to do is download the
file hermes2d-win32-libs.zip and extract it into C:\Dev-Cpp. It is crucial that
the library files (*.a, *.dll) are extracted to the (already existing) directory
C:\Dev-Cpp\lib and the header files to C:\Dev-Cpp\include.

Now download and extract the Hermes2D source archive or check out the latest
version with SVN. Open the file hermes2d-real.dev, which is a Dev-C++ project
for the real version of Hermes2D and build the library by pressing Ctrl+F9.
Close the IDE and repeat for the complex version by opening hermes2d-cplx.dev

Each example in the examples/ directory has its own .dev file. Open one of them
with Dev-C++ and press F9 to compile and run the example.

As of now it is not possible to compile Hermes2D with the Microsoft compiler.
However, it should be possible to compile your project (or the examples) with
MSVC and link with the MinGW libraries.
